---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:

  kubernetes:
    desc: Bootstrap a Talos Kubernetes cluster backed by flux and sops
    prompt: Bootstrap a Talos Kubernetes cluster ... continue?
    summary: |
      cluster: '{{.CLUSTER}}'
      nodes: '{{.NODE}}'
    cmds:
      - { task: etcd }
      - { task: kubeconfig }
      - { task: apps }
    requires:
      vars: ["CLUSTER", "NODE", "KUBERNETES_DIR"]
    preconditions:
      - talosctl --context {{.CLUSTER}} config info >/dev/null 2>&1
      - test -f {{.KUBERNETES_DIR}}/talosconfig

  etcd:
    internal: true
    cmd: until talosctl --context {{.CLUSTER}} --nodes {{.NODE}} bootstrap; do sleep 10; done
    requires:
      vars: ["CLUSTER", "NODE", "KUBERNETES_DIR"]
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/talosconfig
      - talosctl --context {{.CLUSTER}} config info >/dev/null 2>&1

  apps:
    internal: true
    cmds:
      - until kubectl --context {{.CLUSTER}} wait --for=condition=Ready=False nodes --all --timeout=10m; do sleep 10; done
      - helmfile --quiet --kube-context {{.CLUSTER}} --file {{.KUBERNETES_DIR}}/bootstrap/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --context {{.CLUSTER}} wait --for=condition=Ready nodes --all --timeout=10m; do sleep 10; done
    requires:
      vars: ["CLUSTER", "NODE", "KUBERNETES_DIR"]
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/talosconfig
      - test -f {{.KUBERNETES_DIR}}/bootstrap/helmfile.yaml
      - talosctl --context {{.CLUSTER}} config info >/dev/null 2>&1

  kubeconfig:
    internal: true
    cmd: |
      talosctl --context {{.CLUSTER}} kubeconfig --nodes {{.NODE}} \
          --force --force-context-name {{.CLUSTER}} {{.KUBERNETES_DIR}}
    requires:
      vars: ["CLUSTER", "NODE", "KUBERNETES_DIR"]
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/talosconfig
      - talosctl --context {{.CLUSTER}} config info >/dev/null 2>&1

  flux:
    internal: true
    cmds:
      - kubectl --context {{.CLUSTER}} apply --server-side --kustomize {{.KUBERNETES_DIR}}/bootstrap/flux
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/flux/age-key.secret.sops.yaml | kubectl --context {{.CLUSTER}} apply --server-side --filename -
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/flux/github-deploy-key.secret.sops.yaml | kubectl --context {{.CLUSTER}} apply --server-side --filename -
      - sops --decrypt {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.secret.sops.yaml | kubectl --context {{.CLUSTER}} apply --server-side --filename -
      - kubectl --context {{.CLUSTER}} apply --server-side --filename {{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml
      - kubectl --context {{.CLUSTER}} apply --server-side --kustomize {{.KUBERNETES_DIR}}/flux/config
    requires:
      vars: ["CLUSTER", "KUBERNETES_DIR"]
    preconditions:
      - test -f {{.ROOT_DIR}}/age.key
      - test -f {{.KUBERNETES_DIR}}/bootstrap/flux/age-key.secret.sops.yaml
      - test -f {{.KUBERNETES_DIR}}/bootstrap/flux/github-deploy-key.secret.sops.yaml
      - test -f {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.secret.sops.yaml
      - test -f {{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml
      - sops filestatus {{.KUBERNETES_DIR}}/bootstrap/flux/age-key.secret.sops.yaml | jq --exit-status '.encrypted'
      - sops filestatus {{.KUBERNETES_DIR}}/bootstrap/flux/github-deploy-key.secret.sops.yaml | jq --exit-status '.encrypted'
      - sops filestatus {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.secret.sops.yaml | jq --exit-status '.encrypted'
